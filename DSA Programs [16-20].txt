Program 16:
Sample 1 Input
2
12
13
1
Sample 1 Output
Element deleted from queue is : 12
Queue is : 13
Sample 2 Input
5
12
13
14
15
16
4
Sample 2 Output
Element deleted from queue is : 12
Element deleted from queue is : 13
Element deleted from queue is : 14
Element deleted from queue is : 15
Queue is : 16

#include<bits/stdc++.h>
using namespace std;
int f=-1,r=-1;
#define max 100
int q[max];
void enque(int num)
{
 f=0;
 r++;
 q[r]=num;
}
void deque1()
{
 cout<<"Element deleted from queue is : "<<q[f]<<endl;
 for(int i=f;i<r;i++)
 {
 q[i]=q[i+1];
 }
 r--;
}
void display()
{
 for(int i=f;i<=r;i++)
 {
 cout<<q[i]<<" ";
 }
}
int main()
{
 int n;
 cin>>n;
 for(int i=0;i<n;i++)
 {
 int num;
 cin>>num;
 enque(num);
 }
 int m;
 cin>>m;
 for(int i=0;i<m;i++)
 deque1();
 cout<<"Queue is :\n";

 display();
}

Program 17:
Sample 1 Input
140 255 145 985 215
Sample 1 Output
140 255 145 985 215
145 985 215
Queue is empty

#include<bits/stdc++.h>
using namespace std;
#define max 5
int q1[max];
int front=-1,rear=-1;
void enque(int n)
{
front=0;
rear++;
q1[rear]=n;
}
//void enque2(int d)
void deque1()
{
for(int i=0;i<=rear;i++)
{
q1[i]=q1[i+1];
}
rear--;
}
void display()
{
for(int i=front;i<=rear;i++)
{
cout<<q1[i]<<" ";
}cout<<endl;
}
int main()
{
int n;
for(int i=0;i<5;i++)
{
cin>>n;
enque(n);
}display();
for(int i=0;i<2;i++)
deque1();
display();
cout<<"Queue is empty";
}


Program 18:
Sample 1 Input
6
3
1
4
2
-1
Sample 1 Output
Preorder Traversal:
6 3 1 2 4
Sample 2 Input
6
3
1
4
2
9
7
8
10
-1
Sample 2 Output
Preorder Traversal:
6 3 1 2 4 9 7 8 10

#include<bits/stdc++.h>
using namespace std;
struct node
{
 int data;
 node *left,*right;
};
node *root=NULL;
void insert(int num)
{
 node *newnode=new node();
 newnode->data=num;
 if(root==0)
 root=newnode;
 else
 {
 node *temp=root,*pn;
 while(temp!=0)
 {
 pn=temp;
 if(temp->data>num)
 temp=temp->left;
 else
 temp=temp->right;
 }
 if(pn->data>num)
 pn->left=newnode;
 else
 pn->right=newnode;
 }
}
int display(node *n)
{
 node *temp=n;
 if(temp==0)
 return 0;
 cout<<temp->data<<" ";
 display(temp->left);
 display(temp->right);
}
int main()
{
 int n;
 while(true)
 {
 cin>>n;
 if(n==-1)
 break;
 insert(n);
 }
 cout<<"Preorder Traversal:\n";
 display(root);
}

Program 19:
Sample 1 Input
6
3
1
4
2
10
9
7
8
-1
Sample 1 Output
Inorder Traversal:
1 2 3 4 6 7 8 9 10
Sample 2 Input
6
3
1
4
2
-1
Sample 2 Output
Inorder Traversal:
1 2 3 4 6

#include<bits/stdc++.h>
using namespace std;
struct node
{
 int data;
 node *left,*right;
};
node *root=NULL;
void insert(int num)
{
 node *newnode=new node();
 newnode->data=num;
 if(root==NULL)
 root=newnode;
 else
 {
 node *temp=root,*pn;
 while(temp!=0)
 {
 pn=temp;
 if(temp->data>num)
 temp=temp->left;
 else
 temp=temp->right;
 }
 if(pn->data>num)
 pn->left=newnode;
 else
 pn->right=newnode;
 }
}
int display(node *n)
{
 node *temp=n;
 if(temp==0)
 return 0;
 display(temp->left);
 cout<<temp->data<<" ";
 display(temp->right);
}
int main()
{
 int n;
 while(true)
 {
 cin>>n;
 if(n==-1)
 break;
 insert(n);
 }cout<<"Inorder Traversal :\n";
 display(root);
}

Program 20:
Sample 1 Input
6 4
1 2
2 3
3 4
2 4
Sample 1 Output
0
1 -> 2
2 -> 1 -> 3 -> 4
3 -> 2 -> 4
4 -> 3 -> 2
5
Sample 2 Input
6 5
1 2
2 3
3 4
2 4
0 5
Sample 2 Output
0 -> 5
1 -> 2
2 -> 1 -> 3 -> 4
3 -> 2 -> 4
4 -> 3 -> 2
5 -> 0

#include<bits/stdc++.h>
using namespace std;
void addvalue(vector<int>graph[],int v1,int v2)
{
 graph[v1].push_back(v2);
}
void display(vector<int>graph[],int v)
{
 for(int i=0;i<v;i++)
 {
 cout<<i;
 for(int a:graph[i])
 {
 cout<<" -> "<<a;
 }
 cout<<endl;
 }
}
int main()
{
 int v,e;
 cin>>v>>e;
 vector<int> graph[v];
 for(int i=0;i<e;i++)
 {
 int v1,v2;
 cin>>v1>>v2;
 addvalue(graph,v1,v2);
 addvalue(graph,v2,v1);
 }
 display(graph,v);}
