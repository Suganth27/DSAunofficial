Program 6:

#include<bits/stdc++.h>
using namespace std;
struct node
{
 int data;
 node *next,*prev;
};
node *head=NULL;
void insert(int num)
{
 node *newnode=new node();
 newnode->data=num;
 if(head==NULL)
 {
 head=newnode;
 }
 else
 {
 node *temp=head;
 while(temp->next!=0)
 {
 temp=temp->next;
 }
 newnode->prev=newnode;
 temp->next=newnode;
 }
}
void del()
{
 node *temp=head;
 node *t1=temp->next;
 while(t1->next!=0)
 {
 t1=t1->next;
 temp=temp->next;
 }
 temp->next=NULL;

}
void display()
{
 node *temp=head;
 while(temp!=0)
 {
 cout<<temp->data<<" ";
 temp=temp->next;
 }
}
int main()
{
 int n;
 cin>>n;
 for(int i=0;i<n;i++)
 {
 int num;
 cin>>num;
 insert(num);
 }
 display();
 int n1;
 cin>>n1;
 for(int i=0;i<n1;i++)
 {
 del();
 }cout<<endl;
 display();
}

Program 7:

#include<bits/stdc++.h>
using namespace std;
#define max 100
int q1[max];
int front=-1,rear=-1;
void enque(int size,int i)
{
if(rear==size-1)
{
cout<<"Queue is full!!";
}
else
{
front=0;
rear++;
q1[rear]=i;
}
}
void deque1()
{
if(rear==-1&&front==-1)
{
cout<<"Queue is empty!!";
}
else
{
if(front==rear)
{
int num;
num=q1[front];
}
else
{
for(int i=0;i<rear;i++)
{
q1[i]=q1[i+1];
}
rear--;
}
}
}
void display()
{
cout<<q1[front]<<endl;
cout<<q1[rear]<<endl;
}
int main()
{
int n,num;
cin>>n;
for(int i=0;i<n;i++)
{
cin>>num;
enque(n,num);
}display();
deque1();
display();
}

Program 8:

#include<bits/stdc++.h>
using namespace std;
#define mai 100
int size,k;
int q[mai];
int f=-1,r=-1;
void enque(int data)
{
 f=0;
 r++;
 q[r]=data;
}
void del()
{
 for(int i=f;i<=r;i++)
 {
 q[i]=q[i+1];
 }
 r--;
}
void display()
{
 for(int i=0;i<=size-k;i++)
 {
 int max=q[i];
 for(int j=1;j<k;j++)
 {
 if(max<q[j+i])
 {
 max=q[j+i];
 }
 }
 cout<<max<<" ";
 }
 }
int main()
{
 int data;
 cin>>size;
 for(int i=0;i<size;i++)
 {
 cin>>data;
 enque(data);
 }
 cin>>k;
 display();
 }

Program 9:

#include<bits/stdc++.h>
using namespace std;
struct node
{
 int data;
 node *left;
 node *right;
};
node *root=NULL;
void insert(int data)
{
 node *newnode=new node();
 newnode->data=data;
 if(root==NULL)
 {
 root=newnode;
 }
 else
 {
 node *temp,*parentnode;
 temp=root;
 parentnode=NULL;
 while(temp!=0)
 {
 parentnode=temp;
 if(temp->data>data)
 {
 temp=temp->left;
 }
 else
 {
 temp=temp->right;
 }
 }
 if(parentnode->data>data)
 {
 parentnode->left=newnode;
 }
 else
 {
 parentnode->right=newnode;
 }
 }
}
int inorder(node *n)
{
 node *temp=n;
 if(temp==NULL)
 return 0;
 else{
 inorder(temp->left);
 cout<<temp->data<<" ";
 inorder(temp->right);
}
 }
int main()
{
 int n;
 while(true)
 {
 cin>>n;
 if(n==-1)
 {
 break;
 }
 insert(n);
 }
 cout<<"Tree values are:\n";
 inorder(root);
}

Program 10:

#include<bits/stdc++.h>
using namespace std;
void addvalue(vector<int>graph[],int v1,int v2)
{
 graph[v1].push_back(v2);
}
void display(vector<int>graph[],int v)
{
 for(int i=0;i<v;i++)
 {
 cout<<i;
 for(int a:graph[i])
 {
 cout<<" -> "<<a;
 }
 cout<<endl;
 }
}
int main()
{
 int v,e;
 cin>>v>>e;
 vector<int> graph[v];
 for(int i=0;i<e;i++)
 {
 int v1,v2;
 cin>>v1>>v2;
 addvalue(graph,v1,v2);
 addvalue(graph,v2,v1);
 }
 display(graph,v);}